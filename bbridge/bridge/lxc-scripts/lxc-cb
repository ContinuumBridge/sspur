#!/bin/bash

# Create a container for a single CB application which also contains
# busybox. This can be for a C or python application.

install_cbapp()
{
    rootfs=$1
    name=$2
    appbase=`basename $3`
    res=0
    tree="\
$rootfs/selinux \
$rootfs/dev \
$rootfs/home \
$rootfs/root \
$rootfs/etc \
$rootfs/etc/init.d \
$rootfs/bin \
$rootfs/sbin \
$rootfs/proc \
$rootfs/mnt \
$rootfs/tmp \
$rootfs/lxc \
$rootfs/lxc/$appbase \
$rootfs/var/log \
$rootfs/usr/share/udhcpc \
$rootfs/dev/pts \
$rootfs/dev/shm \
$rootfs/lib \
$rootfs/locallib \
$rootfs/usr/lib \
$rootfs/lib64 \
$rootfs/usr/lib64"

    mkdir -p $tree || return 1
    chmod 755 $tree || return 1

    pushd $rootfs/dev > /dev/null || return 1

    # minimal devices needed for cbapp
    mknod tty c 5 0       || res=1
    mknod console c 5 1   || res=1
    chmod 666 tty console || res=1
    mknod tty0 c 4 0      || res=1
    mknod tty1 c 4 0      || res=1
    mknod tty5 c 4 0      || res=1
    chmod 666 tty0        || res=1
    mknod ram0 b 1 0      || res=1
    chmod 600 ram0        || res=1
    mknod null c 1 3      || res=1
    chmod 666 null        || res=1

    popd > /dev/null

    # root user defined
    cat <<EOF >> $rootfs/etc/passwd
root:x:0:0:root:/root:/bin/sh
EOF

    cat <<EOF >> $rootfs/etc/group
root:x:0:root
EOF

    # mount everything and runs the app
    cat <<EOF >> $rootfs/etc/init.d/rcS
#!/bin/sh
/bin/mount -a
PYTHONPATH=/locallib /bin/$appbase
EOF

    # executable
    chmod 744 $rootfs/etc/init.d/rcS || return 1

    # mount points
    cat <<EOF >> $rootfs/etc/fstab
proc  /proc      proc    defaults     0      0
shm   /dev/shm   tmpfs   defaults     0      0
EOF

    # writable and readable for other
    chmod 644 $rootfs/etc/fstab || return 1

    # launch rcS
    cat <<EOF >> $rootfs/etc/inittab
::sysinit:/etc/init.d/rcS
EOF
    # writable and readable for other
    chmod 644 $rootfs/etc/inittab || return 1

    return $res
}

configure_cbapp()
{
    rootfs=$1
    app=$2
    appbase=`basename $2`

    functions="\
	[ [[ addgroup adduser adjtimex ar arp arping ash awk basename \
	brctl bunzip2 bzcat bzip2 cal cat catv chattr chgrp chmod \
	chown chpasswd chpst chroot chrt chvt cksum clear cmp comm \
	cp cpio crond crontab cryptpw cut date dc dd deallocvt \
	delgroup deluser df dhcprelay diff dirname dmesg dnsd dos2unix \
	du dumpkmap dumpleases echo ed egrep eject env envdir envuidgid \
	ether-wake expand expr fakeidentd false fbset fdformat fdisk \
	fetchmail fgrep find findfs fold free freeramdisk fsck \
	fsck.minix ftpget ftpput fuser getopt getty grep gunzip gzip \
	halt hdparm head hexdump hostid hostname httpd hwclock id \
	ifconfig ifdown ifenslave ifup inetd init insmod install ip \
	ipaddr ipcalc ipcrm ipcs iplink iproute iprule iptunnel \
	kbd_mode kill killall killall5 klogd last length less linux32 \
	linux64 linuxrc ln loadfont loadkmap logger login logname \
	logread losetup lpd lpq lpr ls lsattr lsmod lzmacat makedevs \
	md5sum mdev mesg microcom mkdir mkfifo mkfs.minix mknod mkswap \
	mktemp modprobe more mount mountpoint msh mt mv nameif nc \
	netstat nice nmeter nohup nslookup od openvt passwd patch \
	pgrep pidof ping ping6 pipe_progress pivot_root pkill poweroff \
	printenv printf ps pscan pwd raidautorun rdate readahead \
	readlink readprofile realpath reboot renice reset resize rm \
	rmdir rmmod route rpm rpm2cpio run-parts runlevel runsv \
	runsvdir rx script sed sendmail seq setarch setconsole \
	setkeycodes setlogcons setsid setuidgid sh sha1sum slattach \
	sleep softlimit sort split start-stop-daemon stat strings \
	stty su sulogin sum sv svlogd swapoff swapon switch_root \
	sync sysctl syslogd tac tail tar taskset tcpsvd tee telnet \
	telnetd test tftp tftpd time top touch tr traceroute \
	true tty ttysize udhcpc udhcpd udpsvd umount uname uncompress \
	unexpand uniq unix2dos unlzma unzip uptime usleep uudecode \
	uuencode vconfig vi vlock watch watchdog wc wget which \
	who whoami xargs yes zcat zcip"

    type busybox >/dev/null

    if [ $? -ne 0 ]; then
	echo "busybox executable is not accessible"
	return 1
    fi

    file $(which busybox) | grep -q "statically linked"
    if [ $? -ne 0 ]; then
	echo "Warning : busybox is not statically linked."
	echo "Warning : The template script may not correctly"
	echo "Warning : setup the container environment."
    fi

    # copy busybox in the rootfs
    cp $(which busybox) $rootfs/bin
    if [ $? -ne 0 ]; then
	echo "Failed to copy busybox in the rootfs"
	return 1
    fi

    # do hardlink to busybox for the different commands
    for i in $functions; do ln $rootfs/bin/busybox $rootfs/bin/$i; done

    # relink /sbin/init
    ln $rootfs/bin/busybox $rootfs/sbin/init

    # copy python in the rootfs
    cp -L $(which python) $rootfs/bin
    if [ $? -ne 0 ]; then
	echo "Failed to copy python in the rootfs"
	return 1
    fi

    # passwd exec must be setuid
    chmod +s $rootfs/bin/passwd
    touch $rootfs/etc/shadow
    chroot $rootfs /bin/passwd -d root

#    echo "No password for 'root', please change !"

    cp $app $rootfs/bin/$appbase
    if [ ! -z "$pythonlib" ]; then
        # This must be a local lib as /lib etc. are linked
        cp $pythonlib/_cbcomms.so $rootfs/locallib
        cp $pythonlib/cbcomms.py $rootfs/locallib
    fi

    return 0
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3
    appbase=`basename $4`

cat <<EOF >> $path/config
lxc.utsname = $name
lxc.rootfs = $rootfs
EOF

if [ -d "$rootfs/lxc" ]; then
cat <<EOF >> $path/config
lxc.mount.entry=/lxc/$appbase $rootfs/lxc/$appbase none rw,bind 0 0
EOF
fi

if [ -d "$rootfs/lib" ]; then
cat <<EOF >> $path/config
lxc.mount.entry=/lib $rootfs/lib none ro,bind 0 0
lxc.mount.entry=/usr/lib $rootfs/usr/lib none ro,bind 0 0
EOF
fi

if [ -d "/lib64" ] && [ -d "$rootfs/lib64" ]; then
cat <<EOF >> $path/config
lxc.mount.entry=/lib64 $rootfs/lib64 none ro,bind 0 0
EOF
fi

if [ -d "/usr/lib64" ] && [ -d "$rootfs/usr/lib64" ]; then
cat <<EOF >> $path/config
lxc.mount.entry=/usr/lib64 $rootfs/usr/lib64 none ro,bind 0 0
EOF
fi
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> -A|--app=<full app path>
EOF
    return 0
}

options=$(getopt -o hp:n:A:P: -l help,path:,name:,app:,pythonlib: -- "$@")
if [ $? -ne 0 ]; then
        usage $(basename $0)
        exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -p|--path)      path=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
        -A|--app)       app=$2; shift 2;;
        -P|--pythonlib) pythonlib=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ -z "$app" ]; then
    echo "'app' parameter is required"
    exit 1
fi

rootfs=$path/rootfs

install_cbapp $rootfs $name $app
if [ $? -ne 0 ]; then
    echo "failed to install cbapp's rootfs"
    exit 1
fi

configure_cbapp $rootfs $app
if [ $? -ne 0 ]; then
    echo "failed to configure cbapp template"
    exit 1
fi

copy_configuration $path $rootfs $name $app
if [ $? -ne 0 ]; then
    echo "failed to write configuration file"
    exit 1
fi
